<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FFImageLoading</name>
    </assembly>
    <members>
        <member name="M:FFImageLoading.Work.IImageLoaderTask.UsesSameNativeControl(FFImageLoading.Work.IImageLoaderTask)">
            <summary>
            Indicates if the task uses the same native control
            </summary>
            <returns><c>true</c>, if same native control is used, <c>false</c> otherwise.</returns>
            <param name="task">Task to check.</param></member>
        <member name="M:FFImageLoading.Work.IImageLoaderTask.GetKey(System.String)">
            <summary>
            Gets the cache key for this image loading task.
            </summary>
            <value>The cache key.</value></member>
        <member name="M:FFImageLoading.Work.IImageLoaderTask.CanUseMemoryCache(System.String)">
            <summary>
            Indicates if memory cache should be used for the request
            </summary>
            <returns><c>true</c>, if memory cache should be used, <c>false</c> otherwise.</returns>
            <param name="path">Path.</param></member>
        <member name="P:FFImageLoading.Work.IImageLoaderTask.Parameters">
            <summary>
            Gets the parameters used to retrieve the image.
            </summary>
            <value>The parameters to retrieve the image.</value></member>
        <member name="M:FFImageLoading.Work.IImageLoaderTask.RunAsync">
            <summary>
            Runs the image loading task: gets image from file, url, asset or cache. Then assign it to the imageView.
            </summary></member>
        <member name="M:FFImageLoading.Work.IImageLoaderTask.TryLoadingFromCacheAsync">
            <summary>
            Tries to load requested image from the cache asynchronously.
            </summary>
            <returns>A boolean indicating if image was loaded from cache.</returns></member>
        <member name="M:FFImageLoading.Work.IImageLoaderTask.PrepareAndTryLoadingFromCacheAsync">
            <summary>
            Prepares the instance before it runs.
            </summary></member>
        <member name="M:FFImageLoading.Work.IImageLoaderTask.CancelIfNeeded">
            <summary>
            Cancel current task only if needed
            </summary></member>
        <member name="M:FFImageLoading.Work.IImageLoaderTask.LoadFromStreamAsync(System.IO.Stream)">
            <summary>
            Loads the image from given stream asynchronously.
            </summary>
            <returns>An awaitable task.</returns>
            <param name="stream">The stream to get data from.</param></member>
        <member name="P:FFImageLoading.Config.Configuration.MaxCacheSize">
            <summary>
            Gets the maximum size of the cache in bytes.
            </summary>
            <value>The maximum size of the cache in bytes.</value></member>
        <member name="P:FFImageLoading.Config.Configuration.HttpClient">
            <summary>
            Gets the HttpClient used for web requests.
            </summary>
            <value>The HttpClient used for web requests.</value></member>
        <member name="P:FFImageLoading.Config.Configuration.Scheduler">
            <summary>
            Gets the scheduler used to organize/schedule image loading tasks.
            </summary>
            <value>The scheduler used to organize/schedule image loading tasks.</value></member>
        <member name="P:FFImageLoading.Config.Configuration.Logger">
            <summary>
            Gets the logger used to receive debug/error messages.
            </summary>
            <value>The logger.</value></member>
        <member name="P:FFImageLoading.Config.Configuration.DiskCache">
            <summary>
            Gets the disk cache.
            </summary>
            <value>The disk cache.</value></member>
        <member name="P:FFImageLoading.Config.Configuration.DownloadCache">
            <summary>
            Gets the download cache. Download cache is responsible for retrieving data from the web, or taking from the disk cache.
            </summary>
            <value>The download cache.</value></member>
        <member name="P:FFImageLoading.Config.Configuration.LoadWithTransparencyChannel">
            <summary>
            Gets a value indicating whether this <see cref="T:FFImageLoading.Config.Configuration" /> loads images with transparency channel. On Android we save 50% of the memory without transparency since we use 2 bytes per pixel instead of 4.
            </summary>
            <value><c>true</c> if FFIMageLoading loads images with transparency; otherwise, <c>false</c>.</value></member>
        <member name="P:FFImageLoading.Config.Configuration.FadeAnimationEnabled">
            <summary>
            Gets a value indicating whether this <see cref="T:FFImageLoading.Config.Configuration" /> fade animation enabled.
            </summary>
            <value><c>true</c> if fade animation enabled; otherwise, <c>false</c>.</value></member>
        <member name="P:FFImageLoading.Config.Configuration.TransformPlaceholders">
            <summary>
            Gets a value indicating whether this <see cref="T:FFImageLoading.Config.Configuration" /> transforming place is enabled.
            </summary>
            <value><c>true</c> if transform should be applied to placeholder images; otherwise, <c>false</c>.</value></member>
        <!--FIXME: Invalid documentation markup was found for member P:FFImageLoading.Config.Configuration.DownsampleInterpolationMode-->
        <member name="P:FFImageLoading.Config.Configuration.HttpHeadersTimeout">
            <summary>
            Maximum time in seconds to wait to receive HTTP headers before the HTTP request is cancelled.
            </summary>
            <value>The http connect timeout.</value></member>
        <member name="P:FFImageLoading.Config.Configuration.HttpReadTimeout">
            <summary>
            Maximum time in seconds to wait before the HTTP request is cancelled.
            </summary>
            <value>The http read timeout.</value></member>
        <member name="M:FFImageLoading.Work.IWorkScheduler.Cancel(FFImageLoading.Work.IImageLoaderTask)">
            <summary>
            Cancels any pending work for the task.
            </summary>
            <param name="task">Image loading task to cancel</param></member>
        <member name="M:FFImageLoading.Work.IWorkScheduler.LoadImage(FFImageLoading.Work.IImageLoaderTask)">
            <summary>
            Schedules the image loading. If image is found in cache then it returns it, otherwise it loads it.
            </summary>
            <param name="key">Key for cache lookup.</param>
            <param name="task">Image loading task.</param></member>
        <member name="M:FFImageLoading.Work.WorkScheduler.Cancel(FFImageLoading.Work.IImageLoaderTask)">
            <summary>
            Cancels any pending work for the task.
            </summary>
            <param name="task">Image loading task to cancel</param>
            <returns><c>true</c> if this instance cancel task; otherwise, <c>false</c>.</returns></member>
        <member name="M:FFImageLoading.Work.WorkScheduler.LoadImage(FFImageLoading.Work.IImageLoaderTask)">
            <summary>
            Schedules the image loading. If image is found in cache then it returns it, otherwise it loads it.
            </summary>
            <param name="task">Image loading task.</param></member>
        <member name="M:FFImageLoading.Work.TaskParameter.FromFile(System.String)">
            <summary>
            Constructs a new TaskParameter to load an image from a file.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="filepath">Path to the file.</param></member>
        <member name="M:FFImageLoading.Work.TaskParameter.FromUrl(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Constructs a new TaskParameter to load an image from a URL.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="url">URL to the file</param>
            <param name="cacheDuration">How long the file will be cached on disk</param></member>
        <member name="M:FFImageLoading.Work.TaskParameter.FromApplicationBundle(System.String)">
            <summary>
            Constructsa new TaskParameter to load an image from a file from application bundle.
            </summary>
            <param name="filepath">Path to the file.</param>
            <returns>The new TaskParameter.</returns></member>
        <member name="M:FFImageLoading.Work.TaskParameter.FromCompiledResource(System.String)">
            <summary>
            Constructs a new TaskParameter to load an image from a compiled drawable resource.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="resourceName">Name of the resource in drawable folder without extension</param></member>
        <member name="M:FFImageLoading.Work.TaskParameter.FromStream(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IO.Stream}})">
            <summary>
            Constructs a new TaskParameter to load an image from a stream
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="stream">Stream.</param></member>
        <member name="M:FFImageLoading.Work.TaskParameter.LoadingPlaceholder(System.String,FFImageLoading.Work.ImageSource)">
            <summary>
            Defines the placeholder used while loading.
            </summary>
            <param name="path">Path to the file.</param>
            <param name="source">Source for the path: local, web, assets</param></member>
        <member name="M:FFImageLoading.Work.TaskParameter.ErrorPlaceholder(System.String,FFImageLoading.Work.ImageSource)">
            <summary>
            Defines the placeholder used when an error occurs.
            </summary>
            <param name="filepath">Path to the file.</param>
            <param name="source">Source for the path: local, web, assets</param></member>
        <member name="M:FFImageLoading.Work.TaskParameter.DownSample(System.Int32,System.Int32)">
            <summary>
            Reduce memory usage by downsampling the image. Aspect ratio will be kept even if width/height values are incorrect.
            Uses pixels units for width/height
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="width">Optional width parameter, if value is higher than zero it will try to downsample to this width while keeping aspect ratio.</param>
            <param name="height">Optional height parameter, if value is higher than zero it will try to downsample to this height while keeping aspect ratio.</param></member>
        <member name="M:FFImageLoading.Work.TaskParameter.DownSampleInDip(System.Int32,System.Int32)">
            <summary>
            Reduce memory usage by downsampling the image. Aspect ratio will be kept even if width/height values are incorrect.
            Uses device independent points units for width/height
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="width">Optional width parameter, if value is higher than zero it will try to downsample to this width while keeping aspect ratio.</param>
            <param name="height">Optional height parameter, if value is higher than zero it will try to downsample to this height while keeping aspect ratio.</param></member>
        <member name="M:FFImageLoading.Work.TaskParameter.DownSampleMode(FFImageLoading.Work.InterpolationMode)">
            <summary>
            Set mode for downsampling. Speed-wise: nearest neighbour &gt; linear &gt; cubic.\
            Default: bilinear
            On Android it's always ignored as Android uses bitmap insamplesize downsampling (bilinear)
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="mode">Optional mode parameter, if not set, defaults to linear.</param></member>
        <member name="M:FFImageLoading.Work.TaskParameter.TransparencyChannel(System.Boolean)">
            <summary>
            Indicates if the transparency channel should be loaded. By default this value comes from ImageService.Config.LoadWithTransparencyChannel.
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="loadTransparencyChannel">If set to <c>true</c> force loading alpha channel otherwise force not loading it.</param></member>
        <member name="M:FFImageLoading.Work.TaskParameter.FadeAnimation(System.Boolean)">
            <summary>
            Indicates if the fade animation should be enabled.
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="enabled">If set to <c>true</c> enabled.</param></member>
        <member name="M:FFImageLoading.Work.TaskParameter.TransformPlaceholders(System.Boolean)">
            <summary>
            Indicates if transforms should be applied to placeholders.
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="enabled">If set to <c>true</c> enabled.</param></member>
        <member name="M:FFImageLoading.Work.TaskParameter.Retry(System.Int32,System.Int32)">
            <summary>
            If image loading fails automatically retry it a number of times, with a specific delay.
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="retryCount">Number of retries</param>
            <param name="millisecondDelay">Delay in milliseconds between each trial</param></member>
        <member name="M:FFImageLoading.Work.TaskParameter.CacheKey(System.String)">
            <summary>
            Uses this cache key, in addition with the real key, to cache into memory/disk
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="customCacheKey">Custom cache key.</param></member>
        <member name="M:FFImageLoading.Work.TaskParameter.Success(System.Action)">
            <summary>
            If image loading succeded this callback is called
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="action">Action to invoke when loading succeded.</param></member>
        <member name="M:FFImageLoading.Work.TaskParameter.Success(System.Action{FFImageLoading.Work.ImageSize,FFImageLoading.Work.LoadingResult})">
            <summary>
            If image loading succeded this callback is called
            </summary>
            <returns>The TaskParameter instance for chaining the call.</returns>
            <param name="action">Action to invoke when loading succeded. Argument is the size of the image loaded.</param></member>
        <!--FIXME: Invalid documentation markup was found for member M:FFImageLoading.Work.TaskParameter.Error(System.Action{System.Exception})-->
        <!--FIXME: Invalid documentation markup was found for member M:FFImageLoading.Work.TaskParameter.Finish(System.Action{FFImageLoading.Work.IScheduledWork})-->
    </members>
</doc>
