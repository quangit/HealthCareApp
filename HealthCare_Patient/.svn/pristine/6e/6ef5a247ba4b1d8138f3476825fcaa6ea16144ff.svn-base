{"Name":"Google Play Services","Id":1891,"Alias":"googleplayservices","Description":"With Google Play services, your app can take advantage of the latest, Google-powered features such as Maps, Google+, and more, with automatic platform updates distributed as an APK through the Google Play store. This makes it faster for your users to receive updates and easier for you to integrate the newest that Google has to offer.\n\nThis component is only for Xamarin.Android applications that target Android 4.1 (API level 16) and higher. \n\n#### Google Technology\n* Google Play services provides you with easy access to Google services and is tightly integrated with the Android OS. Easy-to-use client libraries are provided for each service that let you implement the functionality you want easier and faster.\n\n#### Standard Authorization\n* All products in Google Play services share a common authorization API that leverages the existing Google accounts on the device. You and your users have a consistent and safe way to grant and receive OAuth2 access tokens to Google services.\n\n#### Automatic Updates\n* Devices running Android 2.23and newer and that have the Google Play Store app automatically receive updates to Google Play services. Enhance your app with the most recent version of Google Play services without worrying about your users\u0027 Android version.\n\n\nHow It Works\n============\n\n### The Google Play services client library\n\nThe client library contains the interfaces to the individual Google services and allows you to obtain authorization from users to gain access to these services with their credentials. It also contains APIs that allow you to resolve any issues at runtime, such as a missing, disabled, or out-of-date Google Play services APK. The client library has a light footprint, so it won\u0027t have an adverse impact on your app\u0027s file size.\n\nIf you want to access added features or products, you can upgrade to a new version of the client library as they are released. However, upgrading is not necessary if you don\u0027t care about new features or bug fixes. We anticipate more Google services to be continuously added, so be on the lookout for these updates.\n\n### The Google Play services APK\nThe Google Play services APK contains the individual Google services and runs as a background service in the Android OS. You interact with the background service through the client library and the service carries out the actions on your behalf. An easy-to-use authorization flow is also provided to gain access to the each Google service, which provides consistency for both you and your users.\n\nThe Google Play services APK is delivered through the Google Play Store, so updates to the services are not dependent on carrier or OEM system image updates. In general, devices running Android 2.2 (Froyo) or later and have the Google Play Store app installed receive updates within a few days. This allows you to use the newest APIs in Google Play services and reach most of the devices in the Android ecosystem (devices older than Android 2.2 or devices without the Google Play Store app are not supported).\n\n![The Google Play services APK on user devices receives regular updates for new APIs, features, and bug fixes.][1]\n\n### The benefits for your app\nGoogle Play services gives you the freedom to use the newest APIs for popular Google services without worrying about device support. Updates to Google Play services are distributed automatically by the Google Play Store and new versions of the client library are delivered through the Android SDK Manager. This makes it easy for you to focus on what\u0027s important: your users\u0027 experience.\n\n[1]: http://developer.android.com/images/play-services-diagram.png","Version":"25.0.0.0","Summary":"Give your apps more features to attract users on a wider range of devices.","QuickStart":"## Google Play Services\n\nThis component contains libraries for all of the Google Play Services API\u0027s.  While you are free to install them all through this component, the recommended approach is to install only the NuGet packages for the API\u0027s you are using in your app.  Here is a list of all the individual libraries which make up Google Play Services:\n\n * Ads\n * Analytics\n * App Indexing\n * App Invites\n * App State\n * Base (all libraries depend and require this)\n * Cast\n * Drive\n * Fitness\n * Games\n * Gcm\n * Identity\n * Location\n * Maps\n * Nearby\n * Panorama\n * Plus\n * Safety Net\n * Wallet\n * Wearable \n\n\n## SDK Version\n\nIt is a good practice to set your Xamarin.Android app\u0027s ***Target Framework*** to *Use latest installed platform (X.Y)* and your ***Target Android Version*** to *Automatic - use target framework version*.  \n\nEven though you may compile your app targeting the latest API level, you can still set your ***Minimum Android version*** all the way down to *2.3 (API Level 10)* to run on older devices.  This means you will be responsible for adding appropriate runtime checks to ensure your app is not using API\u0027s that are not available on a given device which may be running an older version of Android.\n\n\n## Testing\n\nTo test your app using Google Play Services, you must use either:\n\n * A compatible Android device that includes Google Play Store\n * The **Android emulator** with an AVD that runs the **Google APIs** platform\n\nIdeally, you should develop and test your app on a variety of devices, including both phones and tablets.\n\n\n## Google Play Developer Console Setup\n\nSome of the API\u0027s you may want to use require some setup within the [Google Play Developer Console](https://code.google.com/apis/console/).\n\nFor your app, you should create a new *Project*.  Under the *APIs \u0026 auth -\u003e APIs* section you can enable various API\u0027s to use (such as Places, Maps, GCM, etc).\n\n### Create an Android API Key\n\nFor some API\u0027s, such as Maps, you will need to create a *Public API access* key for your Android app.\n\nIn the *Google Play Developer Console* go to the *APIs \u0026 auth -\u003e Credentials* section and click *Create new Key* in the *Public API access* section.  Choose *Android key*.\n\nNext, you need to find the SHA1 hash for both your *debug.keystore* and the *.keystore* you will be signing your app\u0027s release builds with.  You can visit our documentation on [Finding your Keystore\u0027s MD5 or SHA1 Signature](http://developer.xamarin.com/guides/android/deployment,_testing,_and_metrics/MD5_SHA1/) to learn how to do this.\n\nOnce you have your SHA1 hashes, you can enter them in the Google Play Developer Console, one per line, followed by `;com.your.app.package.name`.  Your entries should look something like this:\n\n```\n45:B5:E4:6F:36:AD:0A:98:94:B4:02:66:2B:12:17:F2:56:26:A0:E0;com.your.app.package.name\n56:C6:F5:7A:47:BE:1B:09:05:C5:13:77:3C:23:28:A3:67:37:B1:F1;com.your.app.package.name\n```\n\nAfter you click *create* You will have a new Key.  The *API key* value is what you will use in your Android app, according to the directions of the API you are working with.\n\n### Create a Client ID\n\nFor some Google Play Services API\u0027s (such as App Invites), you will need to create a *Client ID* to make them work.  \n\nIn the *Google Play Developer Console* go to *APIs \u0026 auth -\u003e Credentials* section and click *Create new Client ID* in the *OAuth* section.  \n\nChoose *Installed application* and then pick *Android*.  Enter your package name, and the SHA1 of your app (you will need to create a client ID for both your debug.keystore and release .keystore.\n\nClick *Create Client ID* to complete the step.\n\n\n## Samples\n\nThere are a number of samples included in the component which will help you better understand how to use API\u0027s for the individual Google Play Services libraries.  \n\n\n## Documentation\n\nFor more information, guides, and java samples you should visit the [Google Play Services Documentation](https://developers.google.com/android/)\n","Hash":"f0f5a430fec6226a78647beabf40bcd7","TargetPlatforms":["android"],"TrialHash":null}